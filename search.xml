<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[React实现todolist（一）]]></title>
    <url>%2F2019%2F01%2F18%2FReact%E5%AE%9E%E7%8E%B0Todolist%2F</url>
    <content type="text"><![CDATA[React特点与angular和vue相同，在react中，开发者无需关注繁琐的dom操作，只需关注数据。当数据发生变化，React会自动根据数据渲染页面，这和以往的开发模式完全不同，非常便捷。 同时，React是组件化编程，一个页面是由若干组件构成。每个组件相互独立，具备独立的表现、样式和功能，复用性很强，也易于构建和维护复杂的大型项目 实现Todolist基本功能1.主要功能 用户输入待办事项，点击添加，刚才输入的待办事项就会添加到事件列表中 点击列表中的事件名，就会消除该事件，表示已完成。 2.实现思路 整个程序主要由一个Todolist组件构成 整个程序有两个数据项，用户输入的事件存储在inputValue中，事件列表中的数据存储在list数组中 事件列表是个ul，里面用map函数循环遍历list，生成li 用户点击具体事件，触发函数，list数组删除对应下标的数据 3.Todolist组件源码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849 import React,&#123;Component,Fragment&#125; from 'react';class TodoList extends Component &#123; constructor(props)&#123; super(props); this.state = &#123; inputValue:'', list:[] &#125; &#125; render()&#123; return( &lt;Fragment&gt; &lt;div&gt;&lt;input value=&#123;this.state.inputValue&#125; onChange=&#123;this.handleInputChange.bind(this)&#125;/&gt;&lt;button onClick=&#123;this.handleBtnClick.bind(this)&#125;&gt;添加&lt;/button&gt;&lt;/div&gt; &lt;ul&gt; &#123; this.state.list.map((item,index)=&gt;&#123; return &lt;li key=&#123;index&#125; onClick=&#123;this.handleItemDelete.bind(this,index)&#125;&gt;&#123;item&#125;&lt;/li&gt; &#125;) &#125; &lt;/ul&gt; &lt;/Fragment&gt; ) &#125; handleInputChange(e)&#123; this.setState(&#123; inputValue:e.target.value &#125;) &#125; handleBtnClick()&#123; this.setState(&#123; list:[...this.state.list,this.state.inputValue], inputValue:'' &#125;) &#125; handleItemDelete(index)&#123; const list = this.state.list; list.splice(index,1); this.setState(&#123; list:list &#125;) &#125;&#125;export default TodoList; 4.分步拆解 1.导入Component,Fragment 1import React,&#123;Component,Fragment&#125; from 'react'; 2.用构造函数，初始化数据项，组件用到的数据都存在这 1234567 constructor(props)&#123; super(props); this.state = &#123; inputValue:'', list:[] &#125;&#125; 3. JSX语法，像是在Javascript代码里直接写XML的语法，实质上这只是一个语法糖，每一个XML标签都会被JSX转换工具转换成纯Javascript代码 Fragment是占位符，因为R组件中render（）只能return一个元素，所以需要用一个外层div包裹所有的元素。但因为这个div无意义，结构上很多余，所以React16提供了Fragment组件用于替代这个外层div，渲染出来的页面中是看不见这个Fragment的。 jsx中可在{}中写js表达式或者变量，此处将input的value与数据state中的inputValue单向绑定，input始终展示state中的inputValue。this指向Todolist组件。 onChange绑定handleInputChange方法，输入框内容发生改变时就会触发，用bind改变this指向，使得handleInputChange方法中的this可指向Todolist组件，否则会指向undefined ul中通过map方法从list数据项中循环展示li，每个li绑定对应的handleItemDelete方法，点击可触发删除事件，传入index下标作为参数。map是es6中处理数组的高阶函数，可传入一个函数作为map的参数，将数组的每一项都用传入的函数处理并返回。 1234567891011121314 render()&#123; return( &lt;Fragment&gt; &lt;div&gt;&lt;input value=&#123;this.state.inputValue&#125; onChange=&#123;this.handleInputChange.bind(this)&#125;/&gt;&lt;button onClick=&#123;this.handleBtnClick.bind(this)&#125;&gt;添加&lt;/button&gt;&lt;/div&gt; &lt;ul&gt; &#123; this.state.list.map((item,index)=&gt;&#123; return &lt;li key=&#123;index&#125; onClick=&#123;this.handleItemDelete.bind(this,index)&#125;&gt;&#123;item&#125;&lt;/li&gt; &#125;) &#125; &lt;/ul&gt; &lt;/Fragment&gt; )&#125; 4. 点击添加按钮触发handleInputChange()方法。组件的函数中，如果想改变state中的数据，可用this.setState，传入对象，用键值对的形式修改。handleInputChange(e)中的参数e是event对象，e.target是触发事件的dom节点（此处为input节点），e.target.value指input框中输入的值。 由于React中数据是单向绑定，此时输入框只是单方面展示state中的inputValue，所以必须将e.target.value赋值给inputValue，才能实现数据双向绑定。 12345handleInputChange(e)&#123; this.setState(&#123; inputValue:e.target.value &#125;) &#125; 5. …是es6中的扩展运算符，可将一个数组转为用逗号分隔的参数序列 123456handleBtnClick()&#123; this.setState(&#123; list:[...this.state.list,this.state.inputValue], inputValue:'' &#125;)&#125; 6. React中的immutable原则，要求不能直接修改state中的数据（如删除数组中的某一项），如需修改，需通过定义中间量过渡。比如，下面不能直接写this.state.list.splice(index,1),否则不利于后期性能优化 12345678handleItemDelete(index)&#123; const list = this.state.list; list.splice(index,1); this.setState(&#123; list:list &#125;) &#125; 7. 导出组件 1export default TodoList; 感悟react,vue,angular,微信小程序，都强调数据，数据发生变化，页面就会自动渲染。vue具有双向绑定的特点，react是单向绑定。vue的语法更优雅简洁，但是不如react的jsx灵活自由。二者的思想都强调数据和组件化。微信小程序架构清晰，是按页面来组织代码的，每个页面有自己的wxml,wxss,js,json，但缺乏组件化编程思想，构建复杂项目还是比较吃力的，不过小程序的定位本来就是小型程序，所以也无可厚非。]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+githubpages搭建个人博客的教程]]></title>
    <url>%2F2018%2F11%2F25%2FHexo%2Bgithubpages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[我的电脑系统：win10 64位 前言Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和coding上，是搭建博客的首选框架。 由于搭建过程主要是通过操作命令行和修改配置文件来完成的，所以对语法的要求特别严格，少一个空格都不行，一点点不细心就会冒出很多让人头大的错误，所以一定要细心慢慢来。 网上关Hexo+Github的博客搭建教良莠不齐，有的跳过了某个重要步骤，有的太过复杂，对于第一次接触命令行和github的新手可能头都要大了。 所以我就综合了各位前辈的博客，总结了这份教程清单。由于前辈写的已经非常细致了，本篇文章不做重复性总结了，仅补充一些前辈漏写的注意点。希望能对各位同学有所帮助。 基础篇1.环境搭建 安装node.js ，node.js下载地址 安装git，git下载地址 2.上手操作基础篇推荐看Z皓同学的这篇教程，简洁精炼。 注意！ 第六步里配置里的 repository: git 和 branch: master 这两个一定要加空格，注意中间的空格！否则hexo d 部署时会没有任何反应。hexo配置文件的所有配置项和值之间都有一个空格，忽略了空格就会报错。 第五步中，输入cd ~/.ssh，检查是否由.ssh的文件夹,这一步，若不能正常进入~/.ssh文件夹，不要慌，先跳过去，先执行ssh-keygen -t rsa -C “929762930@qq.com”，再返回来执行cd ~/.ssh 发布新文章的方法： （在本地博客根目录下打开命令行） 1hexo new post &quot;你的博客名字&quot; //sourde文件夹下的_posts文件夹中生成md文件，然后用markdown编辑器编辑文章，并保存为utf-8格式 &ensp; 123hexo cl //clean 清理生成的文档 hexo g //generate 生成静态文档hexo d //deploy 部署到github 修改文章的方法 123hexo cl //clean 清理生成的文档 hexo g //generate 生成静态文档hexo d //deploy 部署到github 博文乱码。将博客文件保存为UTF-8即可解决问题。 1.将博客文件保存为UTF-8 用记事本打开本地的博客文件“xxx.md”，然后点“另存为”，“编码(E):”选择“UTF-8”， 点击“保存”，替换原文件。 2.重新生成，部署，博客乱码即消除。 进阶篇1.上手操作进阶篇依然推荐Z皓同学的后续教程。 注意！ 在配置文件的配置项前加上#就代表关闭该项配置，删掉#就代表开启该项配置。（同样需要注意配置项和值之间的空格问题） 如： 12345# Schemes#scheme: Musescheme: Mist#scheme: Pisces#scheme: Gemini 2.关于评论系统 现在博客可以采用社会化评论系统啦，数据存储在云端，安全又便捷。多说关闭之后，其实还有好多评论，友言、畅言、来比力、disqus、HyperComments、Gitment。来比力的微信登陆在手机端会失灵，HyperComments俄罗斯出的服务不太稳，畅言得备案才行，Gitment移动端适配不好，等等问题。最终推荐Gitalk和Valine(我选择的是Valine,因为可以匿名评论) 3.如需其他个性化配置，请点击此处拓展配置链接 切换主题 设置Menu 初始化对应的Menu文件夹 设置动态背景 在右上角或者左上角实现fork me on github 添加添加RSS 修改文章内链接文本样式 修改底部标签样式 在文章末尾添加“文章结束”标记 设置头像并设置动画效果 修改代码块自定义样式 侧边栏社交小图标设置 主页文章添加阴影效果 网站底部加上访问量 添加热度 网站底部字数统计 设置网站的图标Favicon 实现文章统计功能 添加网页顶部进度加载条 添加来必力云跟帖功能 底部隐藏由Hexo强力驱动、主题–NexT.Mist 去掉底部重复字数统计 添加jiathis分享 博文置顶 修改字体大小 添加DaoVoice在线联系 添加底部桃心 添加侧栏推荐阅读 在文章底部增加版权信息 Hexo博客添加站内搜索 添加外链网易云音乐]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一篇博客]]></title>
    <url>%2F2018%2F11%2F24%2F%E4%BD%A0%E5%A5%BD%EF%BC%8CHexo%2F</url>
    <content type="text"><![CDATA[前言 第一次写博客，有点激动哈哈哈！ 由于老年人忘性大，所以一直很想写点东西，及时总结，方便回忆。于是就在周末用hexo和githubpages搭了这个博客啦，欢迎大家常来玩呀，域名是 hellozj.com 私信功能点击右下角聊天图标，可以直接发消息给我的微信哦！（手机端用户请双击图标） 评论功能文章评论功能也开放啦]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
